/**
 * jQuery
 */
// jquery(); аналог $();
// text() - меняем текст
// hide() - скрыть элемент
// show() - показать элемент
// html() - получить html внутри элемента
// html('<b>text</b>') - заменить html внутри элемента
// attr('src') - вытащить из элемента атрибут src
// attr('title', 'Подсказка') - установить атрибут title для элемента
// removeAttr('src') - удалить у элемента атрибут src
// addClass('border') - добавить элементу класс border
// removeClass('border') - удалить у элемента класс border
// color('color') - узнать значение свойства color
// color('color', 'red') - добавить элементу стиль color: red
// color({'color':'red', 'background':'yellow'}) - добавить несколько свойств
// before() - вставить элемент до выбранного элемента
// after() - вставить элемент после выбранного элемента
// append() - вставить элемент после выбранного элемента, при этом внутри него
// prepend() - вставить элемент до выбранного элемента, при этом внутри него
// length - получить количество элементов
// clone() - клонируем элемент
// remove() - удалить элемент. Если записать в переменную, то затем можно добавить элемент где-либо

$('#id');
$('.class');
$('.class menu');
$('a');
$('[data-block]');

// Если скрипт подключен в head, то обязательно используем конструкции ниже
$(document).ready(function() { // все, что внутри, будет работать после загрузки всего документа

});

$(function() { // короткая запись $(document).ready(function()

});

/**
 * Автоматические циклы
 */
$('[data-block] > p').hide(3000); // все p скроются на 3 секунды

/**
 * each
 */
// для каждого элемента можем применить функцию
$('[data-block] > p').each(function() {
    if($(this).text() == '1') {
        $(this).css('color', 'red')
    }
});

/**
 * События
 */
// событие на прокрутку в окне
$(window).scroll(function () {
    console.log('События scroll')
})

// событие на клик
$('[data-block] > button').click(function () {
    let clone = $(this).clone()
    $(this).after(clone)
})
